name: create pdf from json


on:
  issues:
    types: [opened]

jobs:
  start_pdf_generation_process:
    runs-on: ubuntu-20.04
    steps:
      - name: fetch lastest code from github
        uses: actions/checkout@v4
      
      - name: install nodejs
        uses: actions/setup-node@v4
        with:
          node-version: "20"
        
      - name: initialize repository
        run: npm init -y
      
      - name: install resumed and jsonresume-theme-even packages
        run: npm install resumed jsonresume-theme-even
  
      - name: save github issue_body to resume.json file
        run: echo '${{ github.event.issue.body }}' > resume.json

      - name: Read email from JSON
        id: read_email
        run: |
          EMAIL=$(jq -r '.basics.email' resume.json)
          echo "EMAIL=$EMAIL" >> $GITHUB_ENV

      - name: validate resume.json file
        run: npx resumed validate resume.json

      - name: generate html file from resume.json
        run: npx resumed render --theme jsonresume-theme-even
      
      - name: install puppeteer - this helps us to convert html to pdf
        run: npm install puppeteer

      - name: make script (htmlToPdf.sh) executable
        run:  chmod +x htmlToPdf.sh

      - name: generate pdf from resume.html file.
        run: ./htmlToPdf.sh
    
      - name: generate unique timestamp tag
        id: generate_tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)  # Generate timestamp (YYYYMMDDHHMMSS)
          NEW_TAG="release-${TIMESTAMP}"  # Format tag as release-YYYYMMDDHHMMSS
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Generated tag: $NEW_TAG"
  
      - name: push newly created tag to github.
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}
  
      - name: create gitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          draft: false
          prerelease: false
          files: resume.pdf  
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: extract and save release download url
        run: |
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ env.NEW_TAG }}/resume.pdf"
          echo "public download url: $DOWNLOAD_URL"
          echo $DOWNLOAD_URL > download_link.txt
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
      
      - name: send resume link to user
        env:
          EMAIL_USER: ${{ secrets.SEND_EMAIL_FROM }}
          EMAIL_PASS: ${{ secrets.APP_PASSWORD }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_SERVICE: ${{ secrets.EMAIL_SERVICE }}
        run: node sendEmail.js ${{env.EMAIL}} ${{env.DOWNLOAD_URL}}
